
Memory Configuration

Name             Origin             Length             Attributes
RAM              0x20000000         0x00005000         xrw
CCMRAM           0x00000000         0x00000000         xrw
FLASH            0x08000000         0x00020000         xr
FLASHB1          0x00000000         0x00000000         xr
EXTMEMB0         0x00000000         0x00000000         xr
EXTMEMB1         0x00000000         0x00000000         xr
EXTMEMB2         0x00000000         0x00000000         xr
EXTMEMB3         0x00000000         0x00000000         xr
MEMORY_ARRAY     0x00000000         0x00000000         xrw
*default*        0x00000000         0xffffffff

Linker script and memory map

LOAD c:/winarm/5.4 2016q3/bin/../lib/gcc/arm-none-eabi/5.4.1/../../../../arm-none-eabi/lib/armv7-m\libstdc++_nano.a
LOAD c:/winarm/5.4 2016q3/bin/../lib/gcc/arm-none-eabi/5.4.1/../../../../arm-none-eabi/lib/armv7-m\libm.a
START GROUP
LOAD c:/winarm/5.4 2016q3/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7-m\libgcc.a
LOAD c:/winarm/5.4 2016q3/bin/../lib/gcc/arm-none-eabi/5.4.1/../../../../arm-none-eabi/lib/armv7-m\libg_nano.a
LOAD c:/winarm/5.4 2016q3/bin/../lib/gcc/arm-none-eabi/5.4.1/../../../../arm-none-eabi/lib/armv7-m\libc_nano.a
END GROUP
START GROUP
LOAD c:/winarm/5.4 2016q3/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7-m\libgcc.a
LOAD c:/winarm/5.4 2016q3/bin/../lib/gcc/arm-none-eabi/5.4.1/../../../../arm-none-eabi/lib/armv7-m\libc_nano.a
END GROUP
                0x20005000                __stack = (ORIGIN (RAM) + LENGTH (RAM))
                0x20005000                _estack = __stack
                0x00000400                __Main_Stack_Size = 0x400
                [!provide]                PROVIDE (_Main_Stack_Size, __Main_Stack_Size)
                0x20004c00                __Main_Stack_Limit = (__stack - __Main_Stack_Size)
                [!provide]                PROVIDE (_Main_Stack_Limit, __Main_Stack_Limit)
                0x00000100                _Minimum_Stack_Size = 0x100
                [!provide]                PROVIDE (_Heap_Begin, _end_noinit)
                [!provide]                PROVIDE (_Heap_Limit, (__stack - __Main_Stack_Size))

.isr_vector     0x08000000        0x0
 FILL mask 0xff
                0x08000000                __vectors_start = ABSOLUTE (.)
                0x08000000                __vectors_start__ = ABSOLUTE (.)
 *(.isr_vector)
 *(.cfmconfig)
 *(.after_vectors .after_vectors.*)

.inits          0x08000000       0x28
                0x08000000                __data_regions_array_start = .
                0x08000000        0x4 LONG 0x8000028 LOADADDR (.data)
                0x08000004        0x4 LONG 0x20000000 ADDR (.data)
                0x08000008        0x4 LONG 0x20000000 (ADDR (.data) + SIZEOF (.data))
                0x0800000c        0x4 LONG 0x8000028 LOADADDR (.data_CCMRAM)
                0x08000010        0x4 LONG 0x0 ADDR (.data_CCMRAM)
                0x08000014        0x4 LONG 0x0 (ADDR (.data_CCMRAM) + SIZEOF (.data_CCMRAM))
                0x08000018                __data_regions_array_end = .
                0x08000018                __bss_regions_array_start = .
                0x08000018        0x4 LONG 0x20000000 ADDR (.bss)
                0x0800001c        0x4 LONG 0x20000000 (ADDR (.bss) + SIZEOF (.bss))
                0x08000020        0x4 LONG 0x0 ADDR (.bss_CCMRAM)
                0x08000024        0x4 LONG 0x0 (ADDR (.bss_CCMRAM) + SIZEOF (.bss_CCMRAM))
                0x08000028                __bss_regions_array_end = .
 *(.init)
 *(.fini)
                0x08000028                . = ALIGN (0x4)
                [!provide]                PROVIDE (__preinit_array_start, .)
 *(.preinit_array_sysinit .preinit_array_sysinit.*)
 *(.preinit_array_platform .preinit_array_platform.*)
 *(.preinit_array .preinit_array.*)
                [!provide]                PROVIDE (__preinit_array_end, .)
                0x08000028                . = ALIGN (0x4)
                [!provide]                PROVIDE (__init_array_start, .)
 *(SORT(.init_array.*))
 *(.init_array)
                [!provide]                PROVIDE (__init_array_end, .)
                0x08000028                . = ALIGN (0x4)
                [!provide]                PROVIDE (__fini_array_start, .)
 *(SORT(.fini_array.*))
 *(.fini_array)
                [!provide]                PROVIDE (__fini_array_end, .)

.flashtext
 *(.flashtext .flashtext.*)

.text           0x08000028        0x0
 *(.text .text.*)
 *(.rodata .rodata.* .constdata .constdata.*)
 *(vtable)
 *(.eh_frame*)
 *(.glue_7)
 .glue_7        0x08000028        0x0 linker stubs
 *(.glue_7t)
 .glue_7t       0x08000028        0x0 linker stubs

.vfp11_veneer   0x08000028        0x0
 .vfp11_veneer  0x08000028        0x0 linker stubs

.v4_bx          0x08000028        0x0
 .v4_bx         0x08000028        0x0 linker stubs

.ARM.extab
 *(.ARM.extab* .gnu.linkonce.armextab.*)
                0x08000028                . = ALIGN (0x4)
                0x08000028                __exidx_start = .

.ARM.exidx
 *(.ARM.exidx* .gnu.linkonce.armexidx.*)
                0x08000028                __exidx_end = .
                0x08000028                . = ALIGN (0x4)
                0x08000028                _etext = .
                0x08000028                __etext = .

.data_CCMRAM    0x00000000        0x0 load address 0x08000028
 FILL mask 0xff
 *(.data.CCMRAM .data.CCMRAM.*)
                0x00000000                . = ALIGN (0x4)
                0x08000028                _sidata = LOADADDR (.data)

.data           0x20000000        0x0 load address 0x08000028
 FILL mask 0xff
                0x20000000                _sdata = .
                0x20000000                __data_start__ = .
 *(.data_begin .data_begin.*)
 *(.data .data.*)
 *(.data_end .data_end.*)
                0x20000000                . = ALIGN (0x4)
                0x20000000                _edata = .
                0x20000000                __data_end__ = .

.bss_CCMRAM     0x00000000        0x0
 *(.bss.CCMRAM .bss.CCMRAM.*)

.bss            0x20000000        0x0
                0x20000000                __bss_start__ = .
                0x20000000                _sbss = .
 *(.bss_begin .bss_begin.*)
 *(.bss .bss.*)
 *(COMMON)
 *(.bss_end .bss_end.*)
                0x20000000                . = ALIGN (0x4)
                0x20000000                __bss_end__ = .
                0x20000000                _ebss = .

.noinit_CCMRAM
 *(.noinit.CCMRAM .noinit.CCMRAM.*)

.noinit         0x20000000        0x0
                0x20000000                _noinit = .
 *(.noinit .noinit.*)
                0x20000000                . = ALIGN (0x4)
                0x20000000                _end_noinit = .
                [!provide]                PROVIDE (end, _end_noinit)
                [!provide]                PROVIDE (_end, _end_noinit)
                [!provide]                PROVIDE (__end, _end_noinit)
                [!provide]                PROVIDE (__end__, _end_noinit)

._check_stack   0x20000000      0x100
                0x20000100                . = (. + _Minimum_Stack_Size)
 *fill*         0x20000000      0x100 

.b1text
 *(.b1text)
 *(.b1rodata)
 *(.b1rodata.*)

.eb0text
 *(.eb0text)
 *(.eb0rodata)
 *(.eb0rodata.*)

.eb1text
 *(.eb1text)
 *(.eb1rodata)
 *(.eb1rodata.*)

.eb2text
 *(.eb2text)
 *(.eb2rodata)
 *(.eb2rodata.*)

.eb3text
 *(.eb3text)
 *(.eb3rodata)
 *(.eb3rodata.*)

.stab
 *(.stab)

.stabstr
 *(.stabstr)

.stab.excl
 *(.stab.excl)

.stab.exclstr
 *(.stab.exclstr)

.stab.index
 *(.stab.index)

.stab.indexstr
 *(.stab.indexstr)

.comment
 *(.comment)

.debug
 *(.debug)

.line
 *(.line)

.debug_srcinfo
 *(.debug_srcinfo)

.debug_sfnames
 *(.debug_sfnames)

.debug_aranges
 *(.debug_aranges)

.debug_pubnames
 *(.debug_pubnames)

.debug_info
 *(.debug_info .gnu.linkonce.wi.*)

.debug_abbrev
 *(.debug_abbrev)

.debug_line
 *(.debug_line)

.debug_frame
 *(.debug_frame)

.debug_str
 *(.debug_str)

.debug_loc
 *(.debug_loc)

.debug_macinfo
 *(.debug_macinfo)

.debug_weaknames
 *(.debug_weaknames)

.debug_funcnames
 *(.debug_funcnames)

.debug_typenames
 *(.debug_typenames)

.debug_varnames
 *(.debug_varnames)
OUTPUT(Qlock4_2.elf elf32-littlearm)
